#!/usr/bin/env ruby

# frozen_string_literal: true

require 'yaml'

require_relative 'lib/entry'
require_relative 'lib/git'
require_relative 'lib/projects'
require_relative 'lib/stats'
require_relative 'lib/template'

# Like File.join, except relative to the blog root.  Returns the blog
# root if called withour args.
def join(*args)
  rel = File.join(File.dirname(__FILE__), '..', *args)
  File.expand_path rel
end

# Logs a message for the user.
def log(msg)
  puts "blog :: #{msg}"
end

# Returns the blog version string.
def version
  IO.read(join('src/VERSION')).chomp
end

# Returns a list of blog pages.
def pages
  Dir.glob(join('_pages/**/*.html'))
end

# Returns a list of journal entries..
def entries
  Dir.glob(join('_posts/*.md')).sort.map { |f| Entry.new f }
end

# Returns a list of jorunal entriy dates.
def dates
  entries.collect(&:date)
end

# Returns a sorted list of pages as they should appear in the site
# navigation.
def nav
  @nav ||= pages.map do |p|
    [File.basename(p, '*.html'), YAML.load_file(p)['nav']]
  end.select(&:all?).sort_by(&:last).collect(&:first)
end

# Runs the main blog routine.
def main
  log "starting blog (v#{version})."

  log 'writing nav data'
  File.open(join('_data/nav.yml'), 'w') { |f| f.write(nav.to_yaml) }

  log 'writing git data'
  File.open(join('_data/git.yml'), 'w') { |f| f.write(Git.context.to_yaml) }

  log 'writing stats data'
  File.open(join('_data/stats.yml'), 'w') { |f| f.write(Stats.context.to_yaml) }

  log 'writing project data'
  File.open(join('_data/projects.yml'), 'w') { |f| f.write(Projects.context.to_yaml) }

  log 'writing sitemap'
  File.open(join('sitemap.xml'), 'w') { |f| f.write(Template.sitemap.result(binding)) }

  log 'writing feed'
  File.open(join('feed.xml'), 'w') { |f| f.write(Template.feed.result(binding)) }
end

main if __FILE__ == $PROGRAM_NAME
